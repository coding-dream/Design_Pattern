package com.ruoxu.pattern.command;
/**
 * 命令模式（简单）
 * 定义：将一个请求封装成一个对象，从而让用户使用不同的请求把客户端参数化，对请求排队或者记录请求日志，以及支持可撤销的操作。
 * 
 * 使用场景：需要抽象出待执行的动作，然后以参数的形式提供出来--类似于过程设计中的回调机制，而命令模式正式回调机制的一个面向对象的替代品。
 * 在不同的时刻指定，排列和执行请求。一个命令对象可以有与初始请求无关的生存期。
 * 需要支持取消操作。
 * 支持修改日志功能，这样当系统崩溃时，这些修改可以被重做一遍。
 * 需要支持事务操作。
 * 
 * 总结：命令模式虽然不难，只是相对繁琐，一个简单的调用关系被解耦成多个部分，但是命令模式结构清晰。
 * 
 * 注意：敏捷开发原则告诉我们，不要为代码添加基于猜测的，实际不需要的功能。如果不清楚一个系统是否需要命令模式，一般就不要急着去实现它，
 * 事实上，在需要的时候通过重构实现这个模式并不困难。
 */
public class Demo {// demo指的就是client(人)
	public static void main(String[] args) {
		Receiver receiver = new Receiver();// 接收者角色，如【关机命令的底层逻辑】
		Command command = new ConcreteCommand(receiver);// 命令角色，如【关机命令的 执行方法，cmd命令】
		Invoker invoker = new Invoker(command);// 请求者角色，如【关机的按钮，这个按钮对应着Command这个命令】

		invoker.action();
	}
}
